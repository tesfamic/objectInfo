/* Auto-generated by genmsg_cpp for file /home/tesfamic/fuerte_workspace/sandbox/objectLocation0/msg/objectPosArray.msg */
#ifndef OBJECTLOCATION0_MESSAGE_OBJECTPOSARRAY_H
#define OBJECTLOCATION0_MESSAGE_OBJECTPOSARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "objectLocation0/objectPos.h"

namespace objectLocation0
{
template <class ContainerAllocator>
struct objectPosArray_ {
  typedef objectPosArray_<ContainerAllocator> Type;

  objectPosArray_()
  : position()
  {
  }

  objectPosArray_(const ContainerAllocator& _alloc)
  : position(_alloc)
  {
  }

  typedef std::vector< ::objectLocation0::objectPos_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::objectLocation0::objectPos_<ContainerAllocator> >::other >  _position_type;
  std::vector< ::objectLocation0::objectPos_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::objectLocation0::objectPos_<ContainerAllocator> >::other >  position;


  typedef boost::shared_ptr< ::objectLocation0::objectPosArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::objectLocation0::objectPosArray_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct objectPosArray
typedef  ::objectLocation0::objectPosArray_<std::allocator<void> > objectPosArray;

typedef boost::shared_ptr< ::objectLocation0::objectPosArray> objectPosArrayPtr;
typedef boost::shared_ptr< ::objectLocation0::objectPosArray const> objectPosArrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::objectLocation0::objectPosArray_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::objectLocation0::objectPosArray_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace objectLocation0

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::objectLocation0::objectPosArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::objectLocation0::objectPosArray_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::objectLocation0::objectPosArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "80d8fbab3d3cc04c5f7737732f132d93";
  }

  static const char* value(const  ::objectLocation0::objectPosArray_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x80d8fbab3d3cc04cULL;
  static const uint64_t static_value2 = 0x5f7737732f132d93ULL;
};

template<class ContainerAllocator>
struct DataType< ::objectLocation0::objectPosArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objectLocation0/objectPosArray";
  }

  static const char* value(const  ::objectLocation0::objectPosArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::objectLocation0::objectPosArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objectPos[] position\n\
\n\
================================================================================\n\
MSG: objectLocation0/objectPos\n\
int16 width\n\
int16 height\n\
\n\
";
  }

  static const char* value(const  ::objectLocation0::objectPosArray_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::objectLocation0::objectPosArray_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.position);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct objectPosArray_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::objectLocation0::objectPosArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::objectLocation0::objectPosArray_<ContainerAllocator> & v) 
  {
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::objectLocation0::objectPos_<ContainerAllocator> >::stream(s, indent + "    ", v.position[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // OBJECTLOCATION0_MESSAGE_OBJECTPOSARRAY_H

