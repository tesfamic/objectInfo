/* Auto-generated by genmsg_cpp for file /home/tesfamic/fuerte_workspace/sandbox/objectLocation0/msg/coordinateArray.msg */
#ifndef OBJECTLOCATION0_MESSAGE_COORDINATEARRAY_H
#define OBJECTLOCATION0_MESSAGE_COORDINATEARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "objectLocation0/coordinateContent.h"

namespace objectLocation0
{
template <class ContainerAllocator>
struct coordinateArray_ {
  typedef coordinateArray_<ContainerAllocator> Type;

  coordinateArray_()
  : coordinates()
  {
  }

  coordinateArray_(const ContainerAllocator& _alloc)
  : coordinates(_alloc)
  {
  }

  typedef std::vector< ::objectLocation0::coordinateContent_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::objectLocation0::coordinateContent_<ContainerAllocator> >::other >  _coordinates_type;
  std::vector< ::objectLocation0::coordinateContent_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::objectLocation0::coordinateContent_<ContainerAllocator> >::other >  coordinates;


  typedef boost::shared_ptr< ::objectLocation0::coordinateArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::objectLocation0::coordinateArray_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct coordinateArray
typedef  ::objectLocation0::coordinateArray_<std::allocator<void> > coordinateArray;

typedef boost::shared_ptr< ::objectLocation0::coordinateArray> coordinateArrayPtr;
typedef boost::shared_ptr< ::objectLocation0::coordinateArray const> coordinateArrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::objectLocation0::coordinateArray_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::objectLocation0::coordinateArray_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace objectLocation0

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::objectLocation0::coordinateArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::objectLocation0::coordinateArray_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::objectLocation0::coordinateArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5850328c4be1cfc40d068810a54cfe4d";
  }

  static const char* value(const  ::objectLocation0::coordinateArray_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5850328c4be1cfc4ULL;
  static const uint64_t static_value2 = 0x0d068810a54cfe4dULL;
};

template<class ContainerAllocator>
struct DataType< ::objectLocation0::coordinateArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objectLocation0/coordinateArray";
  }

  static const char* value(const  ::objectLocation0::coordinateArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::objectLocation0::coordinateArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "coordinateContent[] coordinates\n\
\n\
================================================================================\n\
MSG: objectLocation0/coordinateContent\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::objectLocation0::coordinateArray_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::objectLocation0::coordinateArray_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.coordinates);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct coordinateArray_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::objectLocation0::coordinateArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::objectLocation0::coordinateArray_<ContainerAllocator> & v) 
  {
    s << indent << "coordinates[]" << std::endl;
    for (size_t i = 0; i < v.coordinates.size(); ++i)
    {
      s << indent << "  coordinates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::objectLocation0::coordinateContent_<ContainerAllocator> >::stream(s, indent + "    ", v.coordinates[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // OBJECTLOCATION0_MESSAGE_COORDINATEARRAY_H

